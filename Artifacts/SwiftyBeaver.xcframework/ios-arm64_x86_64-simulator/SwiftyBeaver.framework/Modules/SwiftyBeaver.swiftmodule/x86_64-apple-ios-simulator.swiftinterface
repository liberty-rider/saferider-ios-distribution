// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftyBeaver
import Dispatch
import Foundation
import Swift
import UIKit
import _Concurrency
open class BaseDestination : Swift.Hashable, Swift.Equatable {
  open var format: Swift.String
  open var asynchronously: Swift.Bool
  open var minLevel: SwiftyBeaver.SwiftyBeaver.Level
  open var levelString: SwiftyBeaver.BaseDestination.LevelString
  open var levelColor: SwiftyBeaver.BaseDestination.LevelColor
  open var calendar: Foundation.Calendar
  public struct LevelString {
    public var verbose: Swift.String
    public var debug: Swift.String
    public var info: Swift.String
    public var warning: Swift.String
    public var error: Swift.String
  }
  public struct LevelColor {
    public var verbose: Swift.String
    public var debug: Swift.String
    public var info: Swift.String
    public var warning: Swift.String
    public var error: Swift.String
  }
  public func hash(into hasher: inout Swift.Hasher)
  open var defaultHashValue: Swift.Int {
    get
  }
  public init()
  open func send(_ level: SwiftyBeaver.SwiftyBeaver.Level, msg: Swift.String, thread: Swift.String, file: Swift.String, function: Swift.String, line: Swift.Int, context: Any? = nil) -> Swift.String?
  public func execute(synchronously: Swift.Bool, block: @escaping () -> Swift.Void)
  public func executeSynchronously<T>(block: @escaping () throws -> T) rethrows -> T
  public func addFilter(_ filter: SwiftyBeaver.FilterType)
  public func removeFilter(_ filter: SwiftyBeaver.FilterType)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: SwiftyBeaver.BaseDestination, rhs: SwiftyBeaver.BaseDestination) -> Swift.Bool
@_inheritsConvenienceInitializers open class ConsoleDestination : SwiftyBeaver.BaseDestination {
  public var useNSLog: Swift.Bool
  public var useTerminalColors: Swift.Bool {
    get
    set
  }
  override public var defaultHashValue: Swift.Int {
    get
  }
  override public init()
  override open func send(_ level: SwiftyBeaver.SwiftyBeaver.Level, msg: Swift.String, thread: Swift.String, file: Swift.String, function: Swift.String, line: Swift.Int, context: Any? = nil) -> Swift.String?
  @objc deinit
}
open class FileDestination : SwiftyBeaver.BaseDestination {
  public var logFileURL: Foundation.URL?
  public var syncAfterEachWrite: Swift.Bool
  public var colored: Swift.Bool {
    get
    set
  }
  public var logFileMaxSize: (Swift.Int)
  public var logFileAmount: Swift.Int
  override public var defaultHashValue: Swift.Int {
    get
  }
  public init(logFileURL: Foundation.URL? = nil)
  override open func send(_ level: SwiftyBeaver.SwiftyBeaver.Level, msg: Swift.String, thread: Swift.String, file: Swift.String, function: Swift.String, line: Swift.Int, context: Any? = nil) -> Swift.String?
  public func deleteLogFile() -> Swift.Bool
  @objc deinit
}
public protocol FilterType : AnyObject {
  func apply(_ value: Swift.String?) -> Swift.Bool
  func getTarget() -> SwiftyBeaver.Filter.TargetType
  func isRequired() -> Swift.Bool
  func isExcluded() -> Swift.Bool
  func reachedMinLevel(_ level: SwiftyBeaver.SwiftyBeaver.Level) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Filters {
  public static let Path: SwiftyBeaver.PathFilterFactory.Type
  public static let Function: SwiftyBeaver.FunctionFilterFactory.Type
  public static let Message: SwiftyBeaver.MessageFilterFactory.Type
  @objc deinit
}
public class Filter {
  public enum TargetType {
    case Path(SwiftyBeaver.Filter.ComparisonType)
    case Function(SwiftyBeaver.Filter.ComparisonType)
    case Message(SwiftyBeaver.Filter.ComparisonType)
  }
  public enum ComparisonType {
    case StartsWith([Swift.String], Swift.Bool)
    case Contains([Swift.String], Swift.Bool)
    case Excludes([Swift.String], Swift.Bool)
    case EndsWith([Swift.String], Swift.Bool)
    case Equals([Swift.String], Swift.Bool)
    case Custom((Swift.String) -> Swift.Bool)
  }
  public init(_ target: SwiftyBeaver.Filter.TargetType, required: Swift.Bool, minLevel: SwiftyBeaver.SwiftyBeaver.Level)
  public func getTarget() -> SwiftyBeaver.Filter.TargetType
  public func isRequired() -> Swift.Bool
  public func isExcluded() -> Swift.Bool
  public func reachedMinLevel(_ level: SwiftyBeaver.SwiftyBeaver.Level) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers public class CompareFilter : SwiftyBeaver.Filter, SwiftyBeaver.FilterType {
  override public init(_ target: SwiftyBeaver.Filter.TargetType, required: Swift.Bool, minLevel: SwiftyBeaver.SwiftyBeaver.Level)
  public func apply(_ value: Swift.String?) -> Swift.Bool
  override public func isExcluded() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FunctionFilterFactory {
  public static func startsWith(_ prefixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func contains(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func excludes(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func endsWith(_ suffixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func equals(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func custom(required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose, filterPredicate: @escaping (Swift.String) -> Swift.Bool) -> SwiftyBeaver.FilterType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MessageFilterFactory {
  public static func startsWith(_ prefixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func contains(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func excludes(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func endsWith(_ suffixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func equals(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func custom(required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose, filterPredicate: @escaping (Swift.String) -> Swift.Bool) -> SwiftyBeaver.FilterType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PathFilterFactory {
  public static func startsWith(_ prefixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func contains(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func excludes(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func endsWith(_ suffixes: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func equals(_ strings: Swift.String..., caseSensitive: Swift.Bool = false, required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose) -> SwiftyBeaver.FilterType
  public static func custom(required: Swift.Bool = false, minLevel: SwiftyBeaver.SwiftyBeaver.Level = .verbose, filterPredicate: @escaping (Swift.String) -> Swift.Bool) -> SwiftyBeaver.FilterType
  @objc deinit
}
extension SwiftyBeaver.Filter.TargetType : Swift.Equatable {
}
public func == (lhs: SwiftyBeaver.Filter.TargetType, rhs: SwiftyBeaver.Filter.TargetType) -> Swift.Bool
final public class GoogleCloudDestination : SwiftyBeaver.BaseDestination {
  public init(serviceName: Swift.String)
  override final public var asynchronously: Swift.Bool {
    get
    set
  }
  override final public func send(_ level: SwiftyBeaver.SwiftyBeaver.Level, msg: Swift.String, thread: Swift.String, file: Swift.String, function: Swift.String, line: Swift.Int, context: Any? = nil) -> Swift.String?
  @objc deinit
}
open class SBPlatformDestination : SwiftyBeaver.BaseDestination {
  public var appID: Swift.String
  public var appSecret: Swift.String
  public var encryptionKey: Swift.String
  public var analyticsUserName: Swift.String
  public var analyticsUUID: Swift.String {
    get
  }
  public struct SendingPoints {
    public var verbose: Swift.Int
    public var debug: Swift.Int
    public var info: Swift.Int
    public var warning: Swift.Int
    public var error: Swift.Int
    public var threshold: Swift.Int
  }
  public var sendingPoints: SwiftyBeaver.SBPlatformDestination.SendingPoints
  public var showNSLog: Swift.Bool
  public var points: Swift.Int
  public var serverURL: Foundation.URL?
  public var entriesFileURL: Foundation.URL
  public var sendingFileURL: Foundation.URL
  public var analyticsFileURL: Foundation.URL
  override public var defaultHashValue: Swift.Int {
    get
  }
  public init(appID: Swift.String, appSecret: Swift.String, encryptionKey: Swift.String, serverURL: Foundation.URL? = URL(string: "https://api.swiftybeaver.com/api/entries/"), entriesFileName: Swift.String = "sbplatform_entries.json", sendingfileName: Swift.String = "sbplatform_entries_sending.json", analyticsFileName: Swift.String = "sbplatform_analytics.json")
  override open func send(_ level: SwiftyBeaver.SwiftyBeaver.Level, msg: Swift.String, thread: Swift.String, file: Swift.String, function: Swift.String, line: Swift.Int, context: Any? = nil) -> Swift.String?
  public func sendNow()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwiftyBeaver {
  public static let version: Swift.String
  public static let build: Swift.Int
  public enum Level : Swift.Int {
    case verbose
    case debug
    case info
    case warning
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static var destinations: Swift.Set<SwiftyBeaver.BaseDestination> {
    get
  }
  @discardableResult
  open class func addDestination(_ destination: SwiftyBeaver.BaseDestination) -> Swift.Bool
  @discardableResult
  open class func removeDestination(_ destination: SwiftyBeaver.BaseDestination) -> Swift.Bool
  open class func removeAllDestinations()
  open class func countDestinations() -> Swift.Int
  open class func threadName() -> Swift.String
  open class func verbose(_ message: @autoclosure () -> Any, _ file: Swift.String = #file, _ function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  open class func debug(_ message: @autoclosure () -> Any, _ file: Swift.String = #file, _ function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  open class func info(_ message: @autoclosure () -> Any, _ file: Swift.String = #file, _ function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  open class func warning(_ message: @autoclosure () -> Any, _ file: Swift.String = #file, _ function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  open class func error(_ message: @autoclosure () -> Any, _ file: Swift.String = #file, _ function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  open class func custom(level: SwiftyBeaver.SwiftyBeaver.Level, message: @autoclosure () -> Any, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, context: Any? = nil)
  public class func flush(secondTimeout: Swift.Int64) -> Swift.Bool
  @objc deinit
}
extension SwiftyBeaver.SwiftyBeaver.Level : Swift.Equatable {}
extension SwiftyBeaver.SwiftyBeaver.Level : Swift.Hashable {}
extension SwiftyBeaver.SwiftyBeaver.Level : Swift.RawRepresentable {}
